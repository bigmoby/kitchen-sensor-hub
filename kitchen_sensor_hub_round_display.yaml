#==================
#=== Substitutions
#==================
substitutions:
  device_name: new-kitchen-sensor-hub
  friendly_name: Multi-Sensore Cucina

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

esphome:
  name: ${device_name}
  project:
    name: "Bigmoby.${device_name}"
    version: "2.1.0"

# Enable logging
logger:
  level: DEBUG #makes uart stream available in esphome logstream
  # baud_rate: 0 #disable logging over uart

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_password
  client_id: ${device_name}
  id: mqtt_client
  birth_message:
    topic: "${device_name}/status"
    payload: "online"
  will_message:
    topic: "${device_name}/status"
    payload: "offline"

i2c:
  - id: bus_a
    sda: 18
    scl: 19
    scan: true

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  safe_mode: false
  password: !secret ota_password

esp32_ble_tracker:
  scan_parameters:
    active: false

binary_sensor:
  - platform: gpio
    pin: 
      number: 33
      mode: INPUT_PULLUP
    name: ${device_name} Sensore movimento
    id: sensore_movimento
    device_class: motion 
    icon: "mdi:motion-sensor"  

sensor: 
  - platform: adc
    pin: 32
    name: "Sensore Gas"
    id: gas_sensor
    update_interval: 2s
    filters:
      - multiply: 100
    unit_of_measurement: "%"
    device_class: gas 
    icon: "mdi:percent"

  - platform: bme280
    i2c_id: bus_a
    address: 0x76
    temperature:
      name: ${friendly_name} Temperatura
      id: bme280_temperature
      unit_of_measurement: °C
      accuracy_decimals: 1
      filters:
        - lambda: return x - 4.5;
    pressure:
      name: ${friendly_name} Pressione atmosferica
      unit_of_measurement: 'hPa'
      accuracy_decimals: 2
      id: bme280_pressure
      filters:
        - lambda: return x - 2;
    humidity:
      name: ${friendly_name} Umidità relativa
      id: bme280_humidity
      unit_of_measurement: '%'
      accuracy_decimals: 1
      filters:
        - lambda: return x + 16;
    update_interval: 30s  

  - platform: template
    name: ${friendly_name} Altitudine
    lambda: |-
      const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      return ((id(bme280_temperature).state + 273.15) / 0.0065) *
        (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280_pressure).state), 0.190234) - 1); // in meter
    update_interval: 15s
    icon: 'mdi:signal'
    unit_of_measurement: 'm'

  - platform: template
    name: ${friendly_name} Umidità assoluta
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_temperature).state) /
        (id(bme280_temperature).state + 243.5)) * id(bme280_humidity).state * mw) /
        ((273.15 + id(bme280_temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
    update_interval: 10s
    icon: "mdi:water"
    unit_of_measurement: "g/m³"

  - platform: template
    name: ${friendly_name} Punto di rugiada
    lambda: |-
      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
      (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
      ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    unit_of_measurement: °C
    update_interval: 10s
    icon: "mdi:thermometer-alert"

  - platform: xiaomi_hhccjcy01
    mac_address: !secret miflora_mac_address
    temperature:
      name: "Bonsai Ficus temperatura"
    moisture:
      name: "Bonsai Ficus umidità"
    illuminance:
      name: "Bonsai Ficus luminanza"
    conductivity:
      name: "Bonsai Ficus fertilità terreno"
    battery_level:
      name: "Bonsai Ficus livello batteria"

uart:
  id: uart_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 9600
  debug:
    direction: TX
    dummy_receiver: false
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

# "<NO MSG,0,59.0,26.3,987.97>"
interval:
  - interval: 5s
    then:
    - uart.write: !lambda  
                        char buf[42];
                        float gas_percent = id(gas_sensor).state;
                        if(gas_percent > 30) {
                          sprintf(buf, "<ALLARME GAS,1,%.1f,%.1f,%.2f>\r\n", id(bme280_humidity).state, id(bme280_temperature).state, id(bme280_pressure).state);
                        } else {
                          sprintf(buf, "<NO MSG,0,%.1f,%.1f,%.2f>\r\n", id(bme280_humidity).state, id(bme280_temperature).state, id(bme280_pressure).state);
                        }
                        std::string s = buf;
                        return std::vector<unsigned char>( s.begin(), s.end() );

button:
  - platform: restart
    name: Restart ${device_name}