#==================
#=== Substitutions
#==================
substitutions:
  device_name: kitchen-sensor-hub
  friendly_name: Multi-Sensore Cucina
  update_time: 900s

esphome:
  name: ${device_name}
  platform: ESP32
  board: wemos_d1_mini32
  project:
    name: "Bigmoby.kitchen-sensor-hub"
    version: "0.1.0"

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret api_password

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Kitchen-Sensor Fallback Hotspot"
    password: !secret ap_password

captive_portal:

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_password
  client_id: ${device_name}

esp32_ble_tracker:
  scan_parameters:
    active: false

i2c:
  - id: bus_a
    sda: 21
    scl: 22
    scan: true

time:
  - platform: homeassistant
    id: esptime

#   - platform: sntp
#     id: sntptime
#     timezone: "Europe/Rome"

# Some fonts & images to display
font:
  - file: "Roboto-Light.ttf"
    id: font12
    size: 12

  - file: "Roboto-Light.ttf"
    id: font8
    size: 8

  - file: "arial.ttf"
    id: font14
    size: 14

  - file: "BebasNeue-Regular.ttf"
    id: font48_bebas
    size: 48

  - file: "high_sans_serif_7.ttf"
    id: font40_serif
    size: 40   

  - file: "high_sans_serif_7.ttf"
    id: font68_serif
    size: 68

# OLED SSD1306 configuration
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      it.strftime(44, -8, id(font40_serif), "%d %b %Y", id(esptime).now());

      // Print time in HH:MM format
      it.strftime(0, 63, id(font68_serif), TextAlign::BASELINE_LEFT, "%H:%M", id(esptime).now());

      // Print outside temperature (from homeassistant sensor)
      if (id(bme280_temperature).state == id(bme280_temperature).state) {
        it.printf(127, 23, id(font14), TextAlign::TOP_RIGHT , "%.1f °C", id(bme280_temperature).state);
      } else {
        it.print(127, 23, id(font8), TextAlign::TOP_RIGHT , "...waiting...");
      }

      // Print outside humidity (from homeassistant sensor)
      if (id(bme280_humidity).state == id(bme280_humidity).state) {
        it.printf(127, 37, id(font14), TextAlign::TOP_RIGHT , "%.0f %%", id(bme280_humidity).state);
      } else {
        it.print(127, 37, id(font8), TextAlign::TOP_RIGHT , "...waiting...");
      }

      // Print outside pressure (from homeassistant sensor)
      if (id(bme280_pressure).state == id(bme280_pressure).state) {
        it.printf(127, 50, id(font14), TextAlign::TOP_RIGHT , "%.0f hPa", id(bme280_pressure).state);
      } else {
        it.print(127, 50, id(font8), TextAlign::TOP_RIGHT , "...waiting...");
      }

binary_sensor:
  - platform: gpio
    pin: 23
    name: ${friendly_name} Motion Sensor
    icon: "mdi:motion-sensor"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
    ssid:
      name: ESP Connected SSID
    bssid:
      name: ESP Connected BSSID
    mac_address:
      name: ESP Mac Wifi Address
    scan_results:
      name: ESP Latest Scan Results

  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
    state_topic: ${device_name}/uptime_text

sensor:
  #=== Uptime
  - platform: uptime
    name: ${friendly_name} Uptime Sensor
    id: uptime_sensor
    state_topic: ${device_name}/uptime
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
    filters:
      - lambda: return x / 60;
    unit_of_measurement: "m"

  #=== WiFi Signal
  - platform: wifi_signal
    name: ${friendly_name} WiFi Signal
    update_interval: 60s

  - platform: xiaomi_hhccjcy01
    mac_address: !secret miflora_mac_address
    temperature:
      name: "Bonsai Ficus temperatura"
    moisture:
      name: "Bonsai Ficus umidità"
    illuminance:
      name: "Bonsai Ficus luminanza"
    conductivity:
      name: "Bonsai Ficus fertilità terreno"
    battery_level:
      name: "Bonsai Ficus livello batteria"

  - platform: bme280
    i2c_id: bus_a
    address: 0x76
    temperature:
      name: ${friendly_name} Temperatura
      id: bme280_temperature
      filters:
        - lambda: return x - 1.9;
    pressure:
      name: ${friendly_name} Pressione atmosferica
      id: bme280_pressure
    humidity:
      name: ${friendly_name} Umidità relativa
      id: bme280_humidity
      filters:
        - lambda: return x + 7;
    update_interval: 30s

  - platform: template
    name: ${friendly_name} Umidità assoluta
    lambda: |-
      const float mw = 18.01534;    // molar mass of water g/mol
      const float r = 8.31447215;   // Universal gas constant J/mol/K
      return (6.112 * powf(2.718281828, (17.67 * id(bme280_temperature).state) /
        (id(bme280_temperature).state + 243.5)) * id(bme280_humidity).state * mw) /
        ((273.15 + id(bme280_temperature).state) * r); // in grams/m^3
    accuracy_decimals: 2
    update_interval: 30s
    icon: "mdi:water"
    unit_of_measurement: "g/m³"

  - platform: template
    name: ${friendly_name} Punto di rugiada
    lambda: |-
      return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
      (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
      ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    unit_of_measurement: °C
    icon: "mdi:thermometer-alert"
